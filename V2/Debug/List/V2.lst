
AVRASM ver. 2.1.30  D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm Fri Apr 04 07:20:19 2025

D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1095): warning: Register r11 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _keypad_touch=R4
                 	.DEF _keypad_touch_msb=R5
                 	.DEF _counter=R6
                 	.DEF _counter_msb=R7
                 	.DEF _t1=R8
                 	.DEF _t1_msb=R9
                 	.DEF _t2=R10
                 	.DEF _t2_msb=R11
                 	.DEF _menu=R12
                 	.DEF _menu_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00c4 	JMP  __RESET
000002 940c 00f1 	JMP  _ext_int0_isr
000004 940c 00f8 	JMP  _ext_int1_isr
000006 940c 0102 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0111 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _seven_seg:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f
00002f 7c77
000030 5e39
000031 7179      	.DB  0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71
                 _tbl10_G101:
000032 2710
000033 03e8
000034 0064
000035 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000036 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000037 1000
000038 0100
000039 0010
00003a 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003b 0000
00003c 0000      	.DB  0x0,0x0,0x0,0x0
00003d 0000
00003e 0000      	.DB  0x0,0x0,0x0,0x0
00003f 0001      	.DB  0x1,0x0
                 
                 _0x3:
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1144): warning: .cseg .db misalignment - padding zero byte
000040 0001      	.DB  0x1
                 _0x4:
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1146): warning: .cseg .db misalignment - padding zero byte
000041 0001      	.DB  0x1
                 _0x5:
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1148): warning: .cseg .db misalignment - padding zero byte
000042 0001      	.DB  0x1
                 _0x6:
000043 3837
000044 2f39
000045 3534
000046 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
000047 3231
000048 2d33
000049 3020
00004a 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x20,0x30,0x3D,0x2B
                 _0x0:
00004b 6e45
00004c 6574
00004d 2072
00004e 7355      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x55,0x73
00004f 7265
000050 616e
000051 656d
000052 003a      	.DB  0x65,0x72,0x6E,0x61,0x6D,0x65,0x3A,0x0
000053 6e45
000054 6574
000055 2072
000056 6150      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x50,0x61
000057 7373
000058 6f77
000059 6472
00005a 003a      	.DB  0x73,0x73,0x77,0x6F,0x72,0x64,0x3A,0x0
00005b 7355
00005c 7265
00005d 5220
00005e 6765      	.DB  0x55,0x73,0x65,0x72,0x20,0x52,0x65,0x67
00005f 7369
000060 6574
000061 6572
000062 2164      	.DB  0x69,0x73,0x74,0x65,0x72,0x65,0x64,0x21
000063 4c00
000064 676f
000065 6e69
000066 5320      	.DB  0x0,0x4C,0x6F,0x67,0x69,0x6E,0x20,0x53
000067 6375
000068 6563
000069 7373
00006a 7566      	.DB  0x75,0x63,0x63,0x65,0x73,0x73,0x66,0x75
00006b 216c
00006c 5700
00006d 6f72
00006e 676e      	.DB  0x6C,0x21,0x0,0x57,0x72,0x6F,0x6E,0x67
00006f 5520
000070 6573
000071 2f72
000072 6150      	.DB  0x20,0x55,0x73,0x65,0x72,0x2F,0x50,0x61
000073 7373
000074 4c00
000075 676f
000076 6e69      	.DB  0x73,0x73,0x0,0x4C,0x6F,0x67,0x69,0x6E
000077 3c20
000078 0a3d
000079 6552
00007a 6967      	.DB  0x20,0x3C,0x3D,0xA,0x52,0x65,0x67,0x69
00007b 7473
00007c 7265
00007d 4c00
00007e 676f      	.DB  0x73,0x74,0x65,0x72,0x0,0x4C,0x6F,0x67
00007f 6e69
000080 520a
000081 6765
000082 7369      	.DB  0x69,0x6E,0xA,0x52,0x65,0x67,0x69,0x73
000083 6574
000084 2072
000085 3d3c
000086 5200      	.DB  0x74,0x65,0x72,0x20,0x3C,0x3D,0x0,0x52
000087 6c65
000088 7961
000089 3c20
00008a 0a3d      	.DB  0x65,0x6C,0x61,0x79,0x20,0x3C,0x3D,0xA
00008b 7542
00008c 7a7a
00008d 7265
00008e 4200      	.DB  0x42,0x75,0x7A,0x7A,0x65,0x72,0x0,0x42
00008f 7a75
000090 657a
000091 2072
000092 3d3c      	.DB  0x75,0x7A,0x7A,0x65,0x72,0x20,0x3C,0x3D
000093 4c0a
000094 4445
000095 4c00
000096 4445      	.DB  0xA,0x4C,0x45,0x44,0x0,0x4C,0x45,0x44
000097 3c20
000098 0a3d
000099 6f4c
00009a 2067      	.DB  0x20,0x3C,0x3D,0xA,0x4C,0x6F,0x67,0x20
00009b 754f
00009c 0074
00009d 6f4c
00009e 2067      	.DB  0x4F,0x75,0x74,0x0,0x4C,0x6F,0x67,0x20
00009f 754f
0000a0 2074
0000a1 3d3c
0000a2 5200      	.DB  0x4F,0x75,0x74,0x20,0x3C,0x3D,0x0,0x52
0000a3 6c65
0000a4 7961
0000a5 4f20
0000a6 006e      	.DB  0x65,0x6C,0x61,0x79,0x20,0x4F,0x6E,0x0
0000a7 7542
0000a8 7a7a
0000a9 7265
0000aa 4f20      	.DB  0x42,0x75,0x7A,0x7A,0x65,0x72,0x20,0x4F
0000ab 006e
0000ac 454c
0000ad 2044
0000ae 6e4f      	.DB  0x6E,0x0,0x4C,0x45,0x44,0x20,0x4F,0x6E
D:\University\Logic Circuits\Project\V2\Debug\List\V2.asm(1178): warning: .cseg .db misalignment - padding zero byte
0000af 0000      	.DB  0x0
                 _0x2000003:
0000b0 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000b1 000a      	.DW  0x0A
0000b2 0004      	.DW  0x04
0000b3 0076      	.DW  __REG_VARS*2
                 
0000b4 0001      	.DW  0x01
0000b5 0260      	.DW  _option
0000b6 0080      	.DW  _0x3*2
                 
0000b7 0001      	.DW  0x01
0000b8 0264      	.DW  _D1
0000b9 0082      	.DW  _0x4*2
                 
0000ba 0001      	.DW  0x01
0000bb 0266      	.DW  _D2
0000bc 0084      	.DW  _0x5*2
                 
0000bd 0010      	.DW  0x10
0000be 0270      	.DW  _keypad
0000bf 0086      	.DW  _0x6*2
                 
0000c0 0002      	.DW  0x02
0000c1 02dd      	.DW  __base_y_G100
0000c2 0160      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000c3 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000c4 94f8      	CLI
0000c5 27ee      	CLR  R30
0000c6 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c7 e0f1      	LDI  R31,1
0000c8 bffb      	OUT  GICR,R31
0000c9 bfeb      	OUT  GICR,R30
0000ca bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000cb e08d      	LDI  R24,(14-2)+1
0000cc e0a2      	LDI  R26,2
0000cd 27bb      	CLR  R27
                 __CLEAR_REG:
0000ce 93ed      	ST   X+,R30
0000cf 958a      	DEC  R24
0000d0 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000d1 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000d2 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000d3 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000d4 93ed      	ST   X+,R30
0000d5 9701      	SBIW R24,1
0000d6 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d7 e6e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d8 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d9 9185      	LPM  R24,Z+
0000da 9195      	LPM  R25,Z+
0000db 9700      	SBIW R24,0
0000dc f061      	BREQ __GLOBAL_INI_END
0000dd 91a5      	LPM  R26,Z+
0000de 91b5      	LPM  R27,Z+
0000df 9005      	LPM  R0,Z+
0000e0 9015      	LPM  R1,Z+
0000e1 01bf      	MOVW R22,R30
0000e2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000e3 9005      	LPM  R0,Z+
0000e4 920d      	ST   X+,R0
0000e5 9701      	SBIW R24,1
0000e6 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e7 01fb      	MOVW R30,R22
0000e8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e9 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000ea bfed      	OUT  SPL,R30
0000eb e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ec bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ed e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000ee e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ef 940c 03db 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;
                 ;
                 ;// Global variables
                 ;int keypad_touch = 0, counter=0, t1=0, t2 = 0, menu = 1, option = 1, clc = 0, D1 = 1, D2 = 1, list = 0, i=0, login_step= ...
                 
                 	.DSEG
                 ;unsigned char keypad[16] = {'7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', ' ', '0', '=', '+'};
                 ;unsigned char key;
                 ;unsigned char temp_username[10]={0};
                 ;unsigned char temp_password[5]={0};
                 ;const unsigned char seven_seg[16] = {
                 ;    0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07,
                 ;    0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71
                 ;};
                 ;typedef struct {
                 ;    char username[10];
                 ;    unsigned char password_hash[5];
                 ;} User;
                 ;
                 ;User users[5];  // Stores up to 5 users
                 ;int user_count = 0;
                 ;
                 ;// External Interrupt 0 ISR
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) {
                 ; 0000 001A interrupt [2] void ext_int0_isr(void) {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000f1 93ea      	ST   -Y,R30
                 ; 0000 001B     D2 = 0;
0000f2 e0e0      	LDI  R30,LOW(0)
0000f3 93e0 0266 	STS  _D2,R30
0000f5 93e0 0267 	STS  _D2+1,R30
                 ; 0000 001C }
0000f7 c008      	RJMP _0x7F
                 ; .FEND
                 ;
                 ;// External Interrupt 1 ISR
                 ;interrupt [EXT_INT1] void ext_int1_isr(void) {
                 ; 0000 001F interrupt [3] void ext_int1_isr(void) {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000f8 93ea      	ST   -Y,R30
                 ; 0000 0020     D1 = 0;
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa 93e0 0264 	STS  _D1,R30
0000fc 93e0 0265 	STS  _D1+1,R30
                 ; 0000 0021     clc = 0;
0000fe 940e 04de 	CALL SUBOPT_0x0
                 ; 0000 0022 }
                 _0x7F:
000100 91e9      	LD   R30,Y+
000101 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 2 ISR (Keypad input)
                 ;interrupt [EXT_INT2] void ext_int2_isr(void) {
                 ; 0000 0025 interrupt [4] void ext_int2_isr(void) {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000102 93ea      	ST   -Y,R30
000103 93fa      	ST   -Y,R31
000104 b7ef      	IN   R30,SREG
000105 93ea      	ST   -Y,R30
                 ; 0000 0026     keypad_touch++;
000106 01f2      	MOVW R30,R4
000107 9631      	ADIW R30,1
000108 012f      	MOVW R4,R30
                 ; 0000 0027     key = (PIND >> 4) & 0x0F;
000109 b3e0      	IN   R30,0x10
00010a e0f0      	LDI  R31,0
00010b 940e 0597 	CALL __ASRW4
00010d 70ef      	ANDI R30,LOW(0xF)
00010e 93e0 0280 	STS  _key,R30
                 ; 0000 0028 }
000110 c00a      	RJMP _0x7E
                 ; .FEND
                 ;
                 ;// Timer 0 ISR
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void) {
                 ; 0000 002B interrupt [11] void timer0_comp_isr(void) {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000111 93ea      	ST   -Y,R30
000112 93fa      	ST   -Y,R31
000113 b7ef      	IN   R30,SREG
000114 93ea      	ST   -Y,R30
                 ; 0000 002C     t1++;
000115 01f4      	MOVW R30,R8
000116 9631      	ADIW R30,1
000117 014f      	MOVW R8,R30
                 ; 0000 002D     t2++;
000118 01f5      	MOVW R30,R10
000119 9631      	ADIW R30,1
00011a 015f      	MOVW R10,R30
                 ; 0000 002E }
                 _0x7E:
00011b 91e9      	LD   R30,Y+
00011c bfef      	OUT  SREG,R30
00011d 91f9      	LD   R31,Y+
00011e 91e9      	LD   R30,Y+
00011f 9518      	RETI
                 ; .FEND
                 ;
                 ;void register_user() {
                 ; 0000 0030 void register_user() {
                 _register_user:
                 ; .FSTART _register_user
                 ; 0000 0031     lcd_gotoxy(0, 0);
000120 940e 04e4 	CALL SUBOPT_0x1
                 ; 0000 0032     if (keypad_touch == 0) {
000122 f429      	BRNE _0x7
                 ; 0000 0033         lcd_putsf("Enter Username:");
                +
000123 e9a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000124 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000125 940e 046b 	CALL _lcd_putsf
                 ; 0000 0034     } else {
000127 c024      	RJMP _0x8
                 _0x7:
                 ; 0000 0035         if (clc == 0) { lcd_clear(); clc = 1; }
000128 940e 04ec 	CALL SUBOPT_0x2
00012a f411      	BRNE _0x9
00012b 940e 04f2 	CALL SUBOPT_0x3
                 ; 0000 0036         if (keypad_touch <= 9 && keypad[key] != '=') {
                 _0x9:
00012d 940e 04fb 	CALL SUBOPT_0x4
00012f f02c      	BRLT _0xB
000130 940e 0500 	CALL SUBOPT_0x5
000132 81a0      	LD   R26,Z
000133 33ad      	CPI  R26,LOW(0x3D)
000134 f409      	BRNE _0xC
                 _0xB:
000135 c004      	RJMP _0xA
                 _0xC:
                 ; 0000 0037             temp_username[keypad_touch - 1] = keypad[key];
000136 940e 0506 	CALL SUBOPT_0x6
000138 81e0      	LD   R30,Z
000139 93ec      	ST   X,R30
                 ; 0000 0038         }
                 ; 0000 0039 
                 ; 0000 003A         lcd_puts(temp_username);
                 _0xA:
00013a 940e 050c 	CALL SUBOPT_0x7
                 ; 0000 003B 
                 ; 0000 003C         // Move to password entry when username is complete
                 ; 0000 003D         if (keypad_touch == 9 || keypad[key] == '=') {
00013c f029      	BREQ _0xE
00013d 940e 0500 	CALL SUBOPT_0x5
00013f 81a0      	LD   R26,Z
000140 33ad      	CPI  R26,LOW(0x3D)
000141 f451      	BRNE _0xD
                 _0xE:
                 ; 0000 003E             temp_username[keypad_touch - 1] = keypad[key];
000142 940e 0506 	CALL SUBOPT_0x6
000144 940e 0511 	CALL SUBOPT_0x8
                 ; 0000 003F             keypad_touch = 0;
                 ; 0000 0040             clc = 0;
                 ; 0000 0041             register_step=1;
000146 e0e1      	LDI  R30,LOW(1)
000147 e0f0      	LDI  R31,HIGH(1)
000148 93e0 026e 	STS  _register_step,R30
00014a 93f0 026f 	STS  _register_step+1,R31
                 ; 0000 0042         }
                 ; 0000 0043     }
                 _0xD:
                 _0x8:
                 ; 0000 0044 }
00014c 9508      	RET
                 ; .FEND
                 ;
                 ;void register_password() {
                 ; 0000 0046 void register_password() {
                 _register_password:
                 ; .FSTART _register_password
                 ; 0000 0047     lcd_gotoxy(0, 0);
00014d 940e 04e4 	CALL SUBOPT_0x1
                 ; 0000 0048     if (keypad_touch == 0) {
00014f f429      	BRNE _0x10
                 ; 0000 0049         lcd_putsf("Enter Password:");
                +
000150 eaa6     +LDI R26 , LOW ( 2 * _0x0 + ( 16 ) )
000151 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW2FN _0x0,16
000152 940e 046b 	CALL _lcd_putsf
                 ; 0000 004A     } else {
000154 c03b      	RJMP _0x11
                 _0x10:
                 ; 0000 004B         if (clc == 0) { lcd_clear(); clc = 1; }
000155 940e 04ec 	CALL SUBOPT_0x2
000157 f411      	BRNE _0x12
000158 940e 04f2 	CALL SUBOPT_0x3
                 ; 0000 004C         if (keypad_touch <= 4 && keypad[key] != '=') {
                 _0x12:
00015a 940e 0516 	CALL SUBOPT_0x9
00015c f02c      	BRLT _0x14
00015d 940e 0500 	CALL SUBOPT_0x5
00015f 81a0      	LD   R26,Z
000160 33ad      	CPI  R26,LOW(0x3D)
000161 f409      	BRNE _0x15
                 _0x14:
000162 c004      	RJMP _0x13
                 _0x15:
                 ; 0000 004D             temp_password[keypad_touch - 1] = keypad[key];
000163 940e 051b 	CALL SUBOPT_0xA
000165 81e0      	LD   R30,Z
000166 93ec      	ST   X,R30
                 ; 0000 004E         }
                 ; 0000 004F 
                 ; 0000 0050         lcd_puts(temp_password);  // Show password as entered
                 _0x13:
000167 940e 0521 	CALL SUBOPT_0xB
                 ; 0000 0051         // Finalize registration
                 ; 0000 0052         if (keypad_touch == 4 || keypad[key] == '=') {
000169 f029      	BREQ _0x17
00016a 940e 0500 	CALL SUBOPT_0x5
00016c 81a0      	LD   R26,Z
00016d 33ad      	CPI  R26,LOW(0x3D)
00016e f509      	BRNE _0x16
                 _0x17:
                 ; 0000 0053             temp_password[keypad_touch - 1] = keypad[key];
00016f 940e 051b 	CALL SUBOPT_0xA
000171 81e0      	LD   R30,Z
000172 93ec      	ST   X,R30
                 ; 0000 0054             strcpy(users[user_count].username, temp_username);
000173 940e 0526 	CALL SUBOPT_0xC
000175 940e 052e 	CALL SUBOPT_0xD
000177 940e 04d1 	CALL _strcpy
                 ; 0000 0055             strcpy(users[user_count].password_hash, temp_password);
000179 940e 0526 	CALL SUBOPT_0xC
00017b 940e 0535 	CALL SUBOPT_0xE
00017d 940e 04d1 	CALL _strcpy
                 ; 0000 0056             user_count++;
00017f edab      	LDI  R26,LOW(_user_count)
000180 e0b2      	LDI  R27,HIGH(_user_count)
000181 940e 053c 	CALL SUBOPT_0xF
                 ; 0000 0057             keypad_touch=0;
000183 2444      	CLR  R4
000184 2455      	CLR  R5
                 ; 0000 0058             lcd_clear();
000185 940e 042e 	CALL _lcd_clear
                 ; 0000 0059             lcd_putsf("User Registered!");
                +
000187 eba6     +LDI R26 , LOW ( 2 * _0x0 + ( 32 ) )
000188 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW2FN _0x0,32
000189 940e 0542 	CALL SUBOPT_0x10
                 ; 0000 005A             memset(temp_username, 0, sizeof(temp_username));
                 ; 0000 005B             memset(temp_password, 0, sizeof(temp_password));
                 ; 0000 005C             clc=0;
                 ; 0000 005D             menu=5;
00018b e0e5      	LDI  R30,LOW(5)
00018c e0f0      	LDI  R31,HIGH(5)
00018d 016f      	MOVW R12,R30
                 ; 0000 005E             t2=0;
00018e 24aa      	CLR  R10
00018f 24bb      	CLR  R11
                 ; 0000 005F         }
                 ; 0000 0060     }
                 _0x16:
                 _0x11:
                 ; 0000 0061 }
000190 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void login_user() {
                 ; 0000 0064 void login_user() {
                 _login_user:
                 ; .FSTART _login_user
                 ; 0000 0065     lcd_gotoxy(0, 0);
000191 940e 04e4 	CALL SUBOPT_0x1
                 ; 0000 0066     // Username input
                 ; 0000 0067     if (keypad_touch == 0) {
000193 f429      	BRNE _0x19
                 ; 0000 0068         lcd_putsf("Enter Username:");
                +
000194 e9a6     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
000195 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
000196 940e 046b 	CALL _lcd_putsf
                 ; 0000 0069     } else {
000198 c024      	RJMP _0x1A
                 _0x19:
                 ; 0000 006A         if (clc == 0) { lcd_clear(); clc = 1; }
000199 940e 04ec 	CALL SUBOPT_0x2
00019b f411      	BRNE _0x1B
00019c 940e 04f2 	CALL SUBOPT_0x3
                 ; 0000 006B         if (keypad_touch <= 9 && keypad[key] != '=') {
                 _0x1B:
00019e 940e 04fb 	CALL SUBOPT_0x4
0001a0 f02c      	BRLT _0x1D
0001a1 940e 0500 	CALL SUBOPT_0x5
0001a3 81a0      	LD   R26,Z
0001a4 33ad      	CPI  R26,LOW(0x3D)
0001a5 f409      	BRNE _0x1E
                 _0x1D:
0001a6 c004      	RJMP _0x1C
                 _0x1E:
                 ; 0000 006C             // Add character
                 ; 0000 006D             temp_username[keypad_touch - 1] = keypad[key];
0001a7 940e 0506 	CALL SUBOPT_0x6
0001a9 81e0      	LD   R30,Z
0001aa 93ec      	ST   X,R30
                 ; 0000 006E         }
                 ; 0000 006F 
                 ; 0000 0070         lcd_puts(temp_username);
                 _0x1C:
0001ab 940e 050c 	CALL SUBOPT_0x7
                 ; 0000 0071 
                 ; 0000 0072         // Move to password input when username is complete
                 ; 0000 0073         if (keypad_touch == 9 || keypad[key] == '=') {
0001ad f029      	BREQ _0x20
0001ae 940e 0500 	CALL SUBOPT_0x5
0001b0 81a0      	LD   R26,Z
0001b1 33ad      	CPI  R26,LOW(0x3D)
0001b2 f451      	BRNE _0x1F
                 _0x20:
                 ; 0000 0074             temp_username[keypad_touch - 1] = keypad[key];
0001b3 940e 0506 	CALL SUBOPT_0x6
0001b5 940e 0511 	CALL SUBOPT_0x8
                 ; 0000 0075             keypad_touch = 0;
                 ; 0000 0076             clc = 0;
                 ; 0000 0077             login_step=1;
0001b7 e0e1      	LDI  R30,LOW(1)
0001b8 e0f0      	LDI  R31,HIGH(1)
0001b9 93e0 026c 	STS  _login_step,R30
0001bb 93f0 026d 	STS  _login_step+1,R31
                 ; 0000 0078         }
                 ; 0000 0079     }
                 _0x1F:
                 _0x1A:
                 ; 0000 007A }
0001bd 9508      	RET
                 ; .FEND
                 ;
                 ;void login_password() {
                 ; 0000 007C void login_password() {
                 _login_password:
                 ; .FSTART _login_password
                 ; 0000 007D     lcd_gotoxy(0, 0);
0001be 940e 04e4 	CALL SUBOPT_0x1
                 ; 0000 007E     // Password input
                 ; 0000 007F     if (keypad_touch == 0) {
0001c0 f429      	BRNE _0x22
                 ; 0000 0080         lcd_putsf("Enter Password:");
                +
0001c1 eaa6     +LDI R26 , LOW ( 2 * _0x0 + ( 16 ) )
0001c2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW2FN _0x0,16
0001c3 940e 046b 	CALL _lcd_putsf
                 ; 0000 0081     } else {
0001c5 c081      	RJMP _0x23
                 _0x22:
                 ; 0000 0082         if (clc == 0) { lcd_clear(); clc = 1; }
0001c6 940e 04ec 	CALL SUBOPT_0x2
0001c8 f411      	BRNE _0x24
0001c9 940e 04f2 	CALL SUBOPT_0x3
                 ; 0000 0083         if (keypad_touch <= 4 && keypad[key] != ' ') {
                 _0x24:
0001cb 940e 0516 	CALL SUBOPT_0x9
0001cd f02c      	BRLT _0x26
0001ce 940e 0500 	CALL SUBOPT_0x5
0001d0 81a0      	LD   R26,Z
0001d1 32a0      	CPI  R26,LOW(0x20)
0001d2 f409      	BRNE _0x27
                 _0x26:
0001d3 c004      	RJMP _0x25
                 _0x27:
                 ; 0000 0084             // Add character
                 ; 0000 0085             temp_password[keypad_touch - 1] = keypad[key];
0001d4 940e 051b 	CALL SUBOPT_0xA
0001d6 81e0      	LD   R30,Z
0001d7 93ec      	ST   X,R30
                 ; 0000 0086         }
                 ; 0000 0087 
                 ; 0000 0088         lcd_puts(temp_password);  // Show password as entered
                 _0x25:
0001d8 940e 0521 	CALL SUBOPT_0xB
                 ; 0000 0089 
                 ; 0000 008A         // Check credentials when password is complete
                 ; 0000 008B         if (keypad_touch == 4 || keypad[key] == '=') {
0001da f031      	BREQ _0x29
0001db 940e 0500 	CALL SUBOPT_0x5
0001dd 81a0      	LD   R26,Z
0001de 33ad      	CPI  R26,LOW(0x3D)
0001df f009      	BREQ _0x29
0001e0 c066      	RJMP _0x28
                 _0x29:
                 ; 0000 008C             temp_password[keypad_touch - 1] = keypad[key];
0001e1 940e 051b 	CALL SUBOPT_0xA
0001e3 81e0      	LD   R30,Z
0001e4 93ec      	ST   X,R30
                 ; 0000 008D             for (i = 0; i < user_count; i++) {
0001e5 e0e0      	LDI  R30,LOW(0)
0001e6 93e0 026a 	STS  _i,R30
0001e8 93e0 026b 	STS  _i+1,R30
                 _0x2C:
0001ea 91e0 02db 	LDS  R30,_user_count
0001ec 91f0 02dc 	LDS  R31,_user_count+1
0001ee 940e 0559 	CALL SUBOPT_0x11
0001f0 17ae      	CP   R26,R30
0001f1 07bf      	CPC  R27,R31
0001f2 f55c      	BRGE _0x2D
                 ; 0000 008E                 if (strcmp(users[i].username, temp_username) == 0 &&
                 ; 0000 008F                     strcmp(users[i].password_hash, temp_password) == 0) {
0001f3 940e 0559 	CALL SUBOPT_0x11
0001f5 e0ef      	LDI  R30,LOW(15)
0001f6 940e 05a0 	CALL __MULB1W2U
0001f8 940e 052e 	CALL SUBOPT_0xD
0001fa 940e 04bd 	CALL _strcmp
0001fc 30e0      	CPI  R30,0
0001fd f459      	BRNE _0x2F
0001fe 940e 0559 	CALL SUBOPT_0x11
000200 e0ef      	LDI  R30,LOW(15)
000201 940e 05a0 	CALL __MULB1W2U
000203 940e 0535 	CALL SUBOPT_0xE
000205 940e 04bd 	CALL _strcmp
000207 30e0      	CPI  R30,0
000208 f009      	BREQ _0x30
                 _0x2F:
000209 c00f      	RJMP _0x2E
                 _0x30:
                 ; 0000 0090                     lcd_clear();
00020a 940e 042e 	CALL _lcd_clear
                 ; 0000 0091                     counter=0;
00020c 2466      	CLR  R6
00020d 2477      	CLR  R7
                 ; 0000 0092                     PORTA = 0x00;
00020e e0e0      	LDI  R30,LOW(0)
00020f bbeb      	OUT  0x1B,R30
                 ; 0000 0093                     lcd_putsf("Login Successful!");
                +
000210 eca7     +LDI R26 , LOW ( 2 * _0x0 + ( 49 ) )
000211 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 49 ) )
                 	__POINTW2FN _0x0,49
000212 940e 0542 	CALL SUBOPT_0x10
                 ; 0000 0094                     memset(temp_username, 0, sizeof(temp_username));
                 ; 0000 0095                     memset(temp_password, 0, sizeof(temp_password));
                 ; 0000 0096                     clc=0;
                 ; 0000 0097                     lcd_clear();
000214 940e 042e 	CALL _lcd_clear
                 ; 0000 0098                     menu=6;
000216 e0e6      	LDI  R30,LOW(6)
000217 e0f0      	LDI  R31,HIGH(6)
000218 c02a      	RJMP _0x2080003
                 ; 0000 0099                     t2=0;
                 ; 0000 009A                     return;
                 ; 0000 009B                 }
                 ; 0000 009C             }
                 _0x2E:
000219 e6aa      	LDI  R26,LOW(_i)
00021a e0b2      	LDI  R27,HIGH(_i)
00021b 940e 053c 	CALL SUBOPT_0xF
00021d cfcc      	RJMP _0x2C
                 _0x2D:
                 ; 0000 009D 
                 ; 0000 009E             lcd_clear();
00021e 940e 042e 	CALL _lcd_clear
                 ; 0000 009F             memset(temp_username, 0, sizeof(temp_username));
000220 e8e1      	LDI  R30,LOW(_temp_username)
000221 e0f2      	LDI  R31,HIGH(_temp_username)
000222 93fa      	ST   -Y,R31
000223 93ea      	ST   -Y,R30
000224 e0e0      	LDI  R30,LOW(0)
000225 93ea      	ST   -Y,R30
000226 e0aa      	LDI  R26,LOW(10)
000227 e0b0      	LDI  R27,0
000228 940e 04ad 	CALL _memset
                 ; 0000 00A0             memset(temp_password, 0, sizeof(temp_password));
00022a e8eb      	LDI  R30,LOW(_temp_password)
00022b e0f2      	LDI  R31,HIGH(_temp_password)
00022c 93fa      	ST   -Y,R31
00022d 93ea      	ST   -Y,R30
00022e e0e0      	LDI  R30,LOW(0)
00022f 93ea      	ST   -Y,R30
000230 e0a5      	LDI  R26,LOW(5)
000231 e0b0      	LDI  R27,0
000232 940e 04ad 	CALL _memset
                 ; 0000 00A1             lcd_putsf("Wrong User/Pass");
                +
000234 eda9     +LDI R26 , LOW ( 2 * _0x0 + ( 67 ) )
000235 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 67 ) )
                 	__POINTW2FN _0x0,67
000236 940e 046b 	CALL _lcd_putsf
                 ; 0000 00A2             clc=0;
000238 940e 04de 	CALL SUBOPT_0x0
                 ; 0000 00A3             keypad_touch=0;
00023a 2444      	CLR  R4
00023b 2455      	CLR  R5
                 ; 0000 00A4             login_step=0;
00023c e0e0      	LDI  R30,LOW(0)
00023d 93e0 026c 	STS  _login_step,R30
00023f 93e0 026d 	STS  _login_step+1,R30
                 ; 0000 00A5             menu=7;
000241 e0e7      	LDI  R30,LOW(7)
000242 e0f0      	LDI  R31,HIGH(7)
                 _0x2080003:
000243 016f      	MOVW R12,R30
                 ; 0000 00A6             t2=0;
000244 24aa      	CLR  R10
000245 24bb      	CLR  R11
                 ; 0000 00A7             return;
000246 9508      	RET
                 ; 0000 00A8         }
                 ; 0000 00A9     }
                 _0x28:
                 _0x23:
                 ; 0000 00AA }
000247 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void seg_counter(){
                 ; 0000 00AD void seg_counter(){
                 _seg_counter:
                 ; .FSTART _seg_counter
                 ; 0000 00AE     if(t1>49){
000248 e3e1      	LDI  R30,LOW(49)
000249 e0f0      	LDI  R31,HIGH(49)
00024a 15e8      	CP   R30,R8
00024b 05f9      	CPC  R31,R9
00024c f484      	BRGE _0x31
                 ; 0000 00AF         t1=0;
00024d 2488      	CLR  R8
00024e 2499      	CLR  R9
                 ; 0000 00B0         counter++;
00024f 01f3      	MOVW R30,R6
000250 9631      	ADIW R30,1
000251 013f      	MOVW R6,R30
                 ; 0000 00B1         PORTA=seven_seg[counter];
000252 5aec      	SUBI R30,LOW(-_seven_seg*2)
000253 4fff      	SBCI R31,HIGH(-_seven_seg*2)
000254 9004      	LPM  R0,Z
000255 ba0b      	OUT  0x1B,R0
                 ; 0000 00B2         if(counter==15){
000256 e0ef      	LDI  R30,LOW(15)
000257 e0f0      	LDI  R31,HIGH(15)
000258 15e6      	CP   R30,R6
000259 05f7      	CPC  R31,R7
00025a f411      	BRNE _0x32
                 ; 0000 00B3             counter=0;
00025b 2466      	CLR  R6
00025c 2477      	CLR  R7
                 ; 0000 00B4         }
                 ; 0000 00B5       }
                 _0x32:
                 ; 0000 00B6 }
                 _0x31:
00025d 9508      	RET
                 ; .FEND
                 ;
                 ;void bounce1(){
                 ; 0000 00B8 void bounce1(){
                 _bounce1:
                 ; .FSTART _bounce1
                 ; 0000 00B9     if(D1==0){
00025e 91e0 0264 	LDS  R30,_D1
000260 91f0 0265 	LDS  R31,_D1+1
000262 9730      	SBIW R30,0
000263 f489      	BRNE _0x33
                 ; 0000 00BA         if(PIND.3==0){
000264 9983      	SBIC 0x10,3
000265 c00e      	RJMP _0x34
                 ; 0000 00BB             t2=0;
000266 24aa      	CLR  R10
000267 24bb      	CLR  R11
                 ; 0000 00BC             D1=1;
000268 e0e1      	LDI  R30,LOW(1)
000269 e0f0      	LDI  R31,HIGH(1)
00026a 93e0 0264 	STS  _D1,R30
00026c 93f0 0265 	STS  _D1+1,R31
                 ; 0000 00BD             option++;
00026e e6a0      	LDI  R26,LOW(_option)
00026f e0b2      	LDI  R27,HIGH(_option)
000270 940e 053c 	CALL SUBOPT_0xF
                 ; 0000 00BE             clc=0;
000272 940e 04de 	CALL SUBOPT_0x0
                 ; 0000 00BF         }
                 ; 0000 00C0     }
                 _0x34:
                 ; 0000 00C1     else{
000274 c00c      	RJMP _0x35
                 _0x33:
                 ; 0000 00C2         if(PIND.3==0){
000275 9983      	SBIC 0x10,3
000276 c00a      	RJMP _0x36
                 ; 0000 00C3             if(t2>20){
000277 e1e4      	LDI  R30,LOW(20)
000278 e0f0      	LDI  R31,HIGH(20)
000279 15ea      	CP   R30,R10
00027a 05fb      	CPC  R31,R11
00027b f42c      	BRGE _0x37
                 ; 0000 00C4                 D1=0;
00027c e0e0      	LDI  R30,LOW(0)
00027d 93e0 0264 	STS  _D1,R30
00027f 93e0 0265 	STS  _D1+1,R30
                 ; 0000 00C5             }
                 ; 0000 00C6         }
                 _0x37:
                 ; 0000 00C7     }
                 _0x36:
                 _0x35:
                 ; 0000 00C8 }
000281 9508      	RET
                 ; .FEND
                 ;void bounce2(){
                 ; 0000 00C9 void bounce2(){
                 _bounce2:
                 ; .FSTART _bounce2
                 ; 0000 00CA     if(D2==0){
000282 91e0 0266 	LDS  R30,_D2
000284 91f0 0267 	LDS  R31,_D2+1
000286 9730      	SBIW R30,0
000287 f539      	BRNE _0x38
                 ; 0000 00CB         if(PIND.2==0){
000288 9982      	SBIC 0x10,2
000289 c002      	RJMP _0x39
                 ; 0000 00CC             t2=0;
00028a 24aa      	CLR  R10
00028b 24bb      	CLR  R11
                 ; 0000 00CD         }
                 ; 0000 00CE         if(t2>10){
                 _0x39:
00028c e0ea      	LDI  R30,LOW(10)
00028d e0f0      	LDI  R31,HIGH(10)
00028e 15ea      	CP   R30,R10
00028f 05fb      	CPC  R31,R11
000290 f4f4      	BRGE _0x3A
                 ; 0000 00CF             D2=1;
000291 e0e1      	LDI  R30,LOW(1)
000292 e0f0      	LDI  R31,HIGH(1)
000293 93e0 0266 	STS  _D2,R30
000295 93f0 0267 	STS  _D2+1,R31
                 ; 0000 00D0             if(list==0){
000297 940e 055e 	CALL SUBOPT_0x12
000299 9730      	SBIW R30,0
00029a f449      	BRNE _0x3B
                 ; 0000 00D1                 list=option;
00029b 940e 0563 	CALL SUBOPT_0x13
00029d 93e0 0268 	STS  _list,R30
00029f 93f0 0269 	STS  _list+1,R31
                 ; 0000 00D2                 clc=0;
0002a1 940e 04de 	CALL SUBOPT_0x0
                 ; 0000 00D3             }else{
0002a3 c00b      	RJMP _0x3C
                 _0x3B:
                 ; 0000 00D4                 list=0;
0002a4 940e 0568 	CALL SUBOPT_0x14
                 ; 0000 00D5                 PORTC=0x00;
0002a6 bbe5      	OUT  0x15,R30
                 ; 0000 00D6                 PORTA=0x00;
0002a7 e0e0      	LDI  R30,LOW(0)
0002a8 bbeb      	OUT  0x1B,R30
                 ; 0000 00D7                 counter=0;
0002a9 2466      	CLR  R6
0002aa 2477      	CLR  R7
                 ; 0000 00D8                 clc=0;
0002ab 940e 04de 	CALL SUBOPT_0x0
                 ; 0000 00D9                 t2=0;
0002ad 24aa      	CLR  R10
0002ae 24bb      	CLR  R11
                 ; 0000 00DA             }
                 _0x3C:
                 ; 0000 00DB         }
                 ; 0000 00DC     }
                 _0x3A:
                 ; 0000 00DD }
                 _0x38:
0002af 9508      	RET
                 ; .FEND
                 ;
                 ;void start_menu() {
                 ; 0000 00DF void start_menu() {
                 _start_menu:
                 ; .FSTART _start_menu
                 ; 0000 00E0     lcd_gotoxy(0, 0);
0002b0 940e 056e 	CALL SUBOPT_0x15
                 ; 0000 00E1     bounce1(); // Change selection
0002b2 dfab      	RCALL _bounce1
                 ; 0000 00E2     bounce2(); // Confirm selection
0002b3 dfce      	RCALL _bounce2
                 ; 0000 00E3     if (clc == 0) {
0002b4 940e 04ec 	CALL SUBOPT_0x2
0002b6 f411      	BRNE _0x3D
                 ; 0000 00E4         lcd_clear();
0002b7 940e 04f2 	CALL SUBOPT_0x3
                 ; 0000 00E5         clc = 1;
                 ; 0000 00E6     }
                 ; 0000 00E7     if(option==3){option=1;}
                 _0x3D:
0002b9 91a0 0260 	LDS  R26,_option
0002bb 91b0 0261 	LDS  R27,_option+1
0002bd 9713      	SBIW R26,3
0002be f411      	BRNE _0x3E
0002bf 940e 0573 	CALL SUBOPT_0x16
                 ; 0000 00E8     switch (option) {
                 _0x3E:
0002c1 940e 0563 	CALL SUBOPT_0x13
                 ; 0000 00E9         case 1:
0002c3 30e1      	CPI  R30,LOW(0x1)
0002c4 e0a0      	LDI  R26,HIGH(0x1)
0002c5 07fa      	CPC  R31,R26
0002c6 f419      	BRNE _0x42
                 ; 0000 00EA             lcd_putsf("Login <=\nRegister");
                +
0002c7 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 83 ) )
0002c8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 83 ) )
                 	__POINTW2FN _0x0,83
0002c9 c006      	RJMP _0x7C
                 ; 0000 00EB             break;
                 ; 0000 00EC         case 2:
                 _0x42:
0002ca 30e2      	CPI  R30,LOW(0x2)
0002cb e0a0      	LDI  R26,HIGH(0x2)
0002cc 07fa      	CPC  R31,R26
0002cd f421      	BRNE _0x41
                 ; 0000 00ED             lcd_putsf("Login\nRegister <=");
                +
0002ce efab     +LDI R26 , LOW ( 2 * _0x0 + ( 101 ) )
0002cf e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 101 ) )
                 	__POINTW2FN _0x0,101
                 _0x7C:
0002d0 940e 046b 	CALL _lcd_putsf
                 ; 0000 00EE             break;
                 ; 0000 00EF     }
                 _0x41:
                 ; 0000 00F0 
                 ; 0000 00F1     if (list == 1) {
0002d2 91a0 0268 	LDS  R26,_list
0002d4 91b0 0269 	LDS  R27,_list+1
0002d6 9711      	SBIW R26,1
0002d7 f469      	BRNE _0x44
                 ; 0000 00F2         menu = 2;  // Move to login step
0002d8 e0e2      	LDI  R30,LOW(2)
0002d9 e0f0      	LDI  R31,HIGH(2)
0002da 016f      	MOVW R12,R30
                 ; 0000 00F3         lcd_clear();
0002db d152      	RCALL _lcd_clear
                 ; 0000 00F4         clc=0;
0002dc 940e 04de 	CALL SUBOPT_0x0
                 ; 0000 00F5         list=0;
0002de 940e 0568 	CALL SUBOPT_0x14
                 ; 0000 00F6         login_step = 0;
0002e0 93e0 026c 	STS  _login_step,R30
0002e2 93e0 026d 	STS  _login_step+1,R30
                 ; 0000 00F7     } else if (list == 2) {
0002e4 c012      	RJMP _0x45
                 _0x44:
0002e5 91a0 0268 	LDS  R26,_list
0002e7 91b0 0269 	LDS  R27,_list+1
0002e9 9712      	SBIW R26,2
0002ea f461      	BRNE _0x46
                 ; 0000 00F8         menu = 3;  // Move to register step
0002eb e0e3      	LDI  R30,LOW(3)
0002ec e0f0      	LDI  R31,HIGH(3)
0002ed 016f      	MOVW R12,R30
                 ; 0000 00F9         lcd_clear();
0002ee d13f      	RCALL _lcd_clear
                 ; 0000 00FA         clc=0;
0002ef 940e 04de 	CALL SUBOPT_0x0
                 ; 0000 00FB         list=0;
0002f1 940e 0568 	CALL SUBOPT_0x14
                 ; 0000 00FC         register_step = 0;
0002f3 93e0 026e 	STS  _register_step,R30
0002f5 93e0 026f 	STS  _register_step+1,R30
                 ; 0000 00FD     }
                 ; 0000 00FE }
                 _0x46:
                 _0x45:
0002f7 9508      	RET
                 ; .FEND
                 ;void handle_options(){
                 ; 0000 00FF void handle_options(){
                 _handle_options:
                 ; .FSTART _handle_options
                 ; 0000 0100     lcd_gotoxy(0, 0);
0002f8 940e 056e 	CALL SUBOPT_0x15
                 ; 0000 0101     if (clc == 0) { lcd_clear(); clc = 1; }
0002fa 940e 04ec 	CALL SUBOPT_0x2
0002fc f411      	BRNE _0x47
0002fd 940e 04f2 	CALL SUBOPT_0x3
                 ; 0000 0102     if(option==5){option=1;}
                 _0x47:
0002ff 91a0 0260 	LDS  R26,_option
000301 91b0 0261 	LDS  R27,_option+1
000303 9715      	SBIW R26,5
000304 f411      	BRNE _0x48
000305 940e 0573 	CALL SUBOPT_0x16
                 ; 0000 0103     switch(option){
                 _0x48:
000307 940e 0563 	CALL SUBOPT_0x13
                 ; 0000 0104         case 1:
000309 30e1      	CPI  R30,LOW(0x1)
00030a e0a0      	LDI  R26,HIGH(0x1)
00030b 07fa      	CPC  R31,R26
00030c f419      	BRNE _0x4C
                 ; 0000 0105             lcd_putsf("Relay <=\nBuzzer");
                +
00030d e0ad     +LDI R26 , LOW ( 2 * _0x0 + ( 119 ) )
00030e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 119 ) )
                 	__POINTW2FN _0x0,119
00030f c014      	RJMP _0x7D
                 ; 0000 0106             break;
                 ; 0000 0107         case 2:
                 _0x4C:
000310 30e2      	CPI  R30,LOW(0x2)
000311 e0a0      	LDI  R26,HIGH(0x2)
000312 07fa      	CPC  R31,R26
000313 f419      	BRNE _0x4D
                 ; 0000 0108             lcd_putsf("Buzzer <=\nLED");
                +
000314 e1ad     +LDI R26 , LOW ( 2 * _0x0 + ( 135 ) )
000315 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 135 ) )
                 	__POINTW2FN _0x0,135
000316 c00d      	RJMP _0x7D
                 ; 0000 0109             break;
                 ; 0000 010A         case 3:
                 _0x4D:
000317 30e3      	CPI  R30,LOW(0x3)
000318 e0a0      	LDI  R26,HIGH(0x3)
000319 07fa      	CPC  R31,R26
00031a f419      	BRNE _0x4E
                 ; 0000 010B             lcd_putsf("LED <=\nLog Out");
                +
00031b e2ab     +LDI R26 , LOW ( 2 * _0x0 + ( 149 ) )
00031c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 149 ) )
                 	__POINTW2FN _0x0,149
00031d c006      	RJMP _0x7D
                 ; 0000 010C             break;
                 ; 0000 010D         case 4:
                 _0x4E:
00031e 30e4      	CPI  R30,LOW(0x4)
00031f e0a0      	LDI  R26,HIGH(0x4)
000320 07fa      	CPC  R31,R26
000321 f419      	BRNE _0x4B
                 ; 0000 010E             lcd_putsf("Log Out <=");
                +
000322 e3aa     +LDI R26 , LOW ( 2 * _0x0 + ( 164 ) )
000323 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 164 ) )
                 	__POINTW2FN _0x0,164
                 _0x7D:
000324 d146      	RCALL _lcd_putsf
                 ; 0000 010F     }
                 _0x4B:
                 ; 0000 0110 }
000325 9508      	RET
                 ; .FEND
                 ;void handle_list(){
                 ; 0000 0111 void handle_list(){
                 _handle_list:
                 ; .FSTART _handle_list
                 ; 0000 0112     if (clc == 0) { lcd_clear(); clc = 1; }
000326 940e 04ec 	CALL SUBOPT_0x2
000328 f411      	BRNE _0x50
000329 940e 04f2 	CALL SUBOPT_0x3
                 ; 0000 0113     lcd_gotoxy(0, 0);
                 _0x50:
00032b 940e 056e 	CALL SUBOPT_0x15
                 ; 0000 0114     switch(list){
00032d 940e 055e 	CALL SUBOPT_0x12
                 ; 0000 0115         case 1:
00032f 30e1      	CPI  R30,LOW(0x1)
000330 e0a0      	LDI  R26,HIGH(0x1)
000331 07fa      	CPC  R31,R26
000332 f449      	BRNE _0x54
                 ; 0000 0116             PORTC.0 = 1;
000333 9aa8      	SBI  0x15,0
                 ; 0000 0117             PORTA = seven_seg[12];
                +
000334 e6e0     +LDI R30 , LOW ( 2 * _seven_seg + ( 12 ) )
000335 e0f0     +LDI R31 , HIGH ( 2 * _seven_seg + ( 12 ) )
                 	__POINTW1FN _seven_seg,12
000336 9004      	LPM  R0,Z
000337 ba0b      	OUT  0x1B,R0
                 ; 0000 0118             lcd_putsf("Relay On");
                +
000338 e4a5     +LDI R26 , LOW ( 2 * _0x0 + ( 175 ) )
000339 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 175 ) )
                 	__POINTW2FN _0x0,175
00033a d130      	RCALL _lcd_putsf
                 ; 0000 0119             break;
00033b c03d      	RJMP _0x53
                 ; 0000 011A         case 2:
                 _0x54:
00033c 30e2      	CPI  R30,LOW(0x2)
00033d e0a0      	LDI  R26,HIGH(0x2)
00033e 07fa      	CPC  R31,R26
00033f f4c1      	BRNE _0x57
                 ; 0000 011B             PORTA = seven_seg[11];
                +
000340 e5ef     +LDI R30 , LOW ( 2 * _seven_seg + ( 11 ) )
000341 e0f0     +LDI R31 , HIGH ( 2 * _seven_seg + ( 11 ) )
                 	__POINTW1FN _seven_seg,11
000342 9004      	LPM  R0,Z
000343 ba0b      	OUT  0x1B,R0
                 ; 0000 011C             lcd_putsf("Buzzer On");
                +
000344 e4ae     +LDI R26 , LOW ( 2 * _0x0 + ( 184 ) )
000345 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 184 ) )
                 	__POINTW2FN _0x0,184
000346 d124      	RCALL _lcd_putsf
                 ; 0000 011D             if(counter==0){
000347 2c06      	MOV  R0,R6
000348 2807      	OR   R0,R7
000349 f439      	BRNE _0x58
                 ; 0000 011E                 t1=0;
00034a 2488      	CLR  R8
00034b 2499      	CLR  R9
                 ; 0000 011F                 PORTC.1=1;
00034c 9aa9      	SBI  0x15,1
                 ; 0000 0120                 counter++;
00034d 01f3      	MOVW R30,R6
00034e 9631      	ADIW R30,1
00034f 013f      	MOVW R6,R30
                 ; 0000 0121             }else{
000350 c006      	RJMP _0x5B
                 _0x58:
                 ; 0000 0122                 if(t1>49){
000351 e3e1      	LDI  R30,LOW(49)
000352 e0f0      	LDI  R31,HIGH(49)
000353 15e8      	CP   R30,R8
000354 05f9      	CPC  R31,R9
000355 f40c      	BRGE _0x5C
                 ; 0000 0123                     PORTC.1=0;
000356 98a9      	CBI  0x15,1
                 ; 0000 0124                     }
                 ; 0000 0125                 }
                 _0x5C:
                 _0x5B:
                 ; 0000 0126             break;
000357 c021      	RJMP _0x53
                 ; 0000 0127         case 3:
                 _0x57:
000358 30e3      	CPI  R30,LOW(0x3)
000359 e0a0      	LDI  R26,HIGH(0x3)
00035a 07fa      	CPC  R31,R26
00035b f449      	BRNE _0x5F
                 ; 0000 0128             PORTC.2 = 1;
00035c 9aaa      	SBI  0x15,2
                 ; 0000 0129             PORTA = seven_seg[10];
                +
00035d e5ee     +LDI R30 , LOW ( 2 * _seven_seg + ( 10 ) )
00035e e0f0     +LDI R31 , HIGH ( 2 * _seven_seg + ( 10 ) )
                 	__POINTW1FN _seven_seg,10
00035f 9004      	LPM  R0,Z
000360 ba0b      	OUT  0x1B,R0
                 ; 0000 012A             lcd_putsf("LED On");
                +
000361 e5a8     +LDI R26 , LOW ( 2 * _0x0 + ( 194 ) )
000362 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 194 ) )
                 	__POINTW2FN _0x0,194
000363 d107      	RCALL _lcd_putsf
                 ; 0000 012B             break;
000364 c014      	RJMP _0x53
                 ; 0000 012C         case 4:
                 _0x5F:
000365 30e4      	CPI  R30,LOW(0x4)
000366 e0a0      	LDI  R26,HIGH(0x4)
000367 07fa      	CPC  R31,R26
000368 f481      	BRNE _0x53
                 ; 0000 012D             menu=1;
000369 e0e1      	LDI  R30,LOW(1)
00036a e0f0      	LDI  R31,HIGH(1)
00036b 016f      	MOVW R12,R30
                 ; 0000 012E             clc=0;
00036c 940e 04de 	CALL SUBOPT_0x0
                 ; 0000 012F             keypad_touch=0;
00036e 2444      	CLR  R4
00036f 2455      	CLR  R5
                 ; 0000 0130             counter=0;
000370 2466      	CLR  R6
000371 2477      	CLR  R7
                 ; 0000 0131             option=1;
000372 940e 0573 	CALL SUBOPT_0x16
                 ; 0000 0132             list=0;
000374 e0e0      	LDI  R30,LOW(0)
000375 93e0 0268 	STS  _list,R30
000377 93e0 0269 	STS  _list+1,R30
                 ; 0000 0133             break;
                 ; 0000 0134     }
                 _0x53:
                 ; 0000 0135 }
000379 9508      	RET
                 ; .FEND
                 ;
                 ;void handle_menu() {
                 ; 0000 0137 void handle_menu() {
                 _handle_menu:
                 ; .FSTART _handle_menu
                 ; 0000 0138     switch (menu) {
00037a 01f6      	MOVW R30,R12
                 ; 0000 0139         case 1:
00037b 30e1      	CPI  R30,LOW(0x1)
00037c e0a0      	LDI  R26,HIGH(0x1)
00037d 07fa      	CPC  R31,R26
00037e f419      	BRNE _0x66
                 ; 0000 013A             seg_counter();
00037f dec8      	RCALL _seg_counter
                 ; 0000 013B             start_menu();
000380 df2f      	RCALL _start_menu
                 ; 0000 013C             break;
000381 c058      	RJMP _0x65
                 ; 0000 013D         case 2:
                 _0x66:
000382 30e2      	CPI  R30,LOW(0x2)
000383 e0a0      	LDI  R26,HIGH(0x2)
000384 07fa      	CPC  R31,R26
000385 f489      	BRNE _0x67
                 ; 0000 013E             // User selected login
                 ; 0000 013F             seg_counter();
000386 dec1      	RCALL _seg_counter
                 ; 0000 0140             if (login_step == 0) {
000387 91e0 026c 	LDS  R30,_login_step
000389 91f0 026d 	LDS  R31,_login_step+1
00038b 9730      	SBIW R30,0
00038c f411      	BRNE _0x68
                 ; 0000 0141                 login_user();  // Entering username
00038d de03      	RCALL _login_user
                 ; 0000 0142             } else if (login_step == 1) {
00038e c007      	RJMP _0x69
                 _0x68:
00038f 91a0 026c 	LDS  R26,_login_step
000391 91b0 026d 	LDS  R27,_login_step+1
000393 9711      	SBIW R26,1
000394 f409      	BRNE _0x6A
                 ; 0000 0143                 login_password();  // Entering password
000395 de28      	RCALL _login_password
                 ; 0000 0144             }
                 ; 0000 0145             break;
                 _0x6A:
                 _0x69:
000396 c043      	RJMP _0x65
                 ; 0000 0146         case 3:
                 _0x67:
000397 30e3      	CPI  R30,LOW(0x3)
000398 e0a0      	LDI  R26,HIGH(0x3)
000399 07fa      	CPC  R31,R26
00039a f489      	BRNE _0x6B
                 ; 0000 0147             // User selected register
                 ; 0000 0148             seg_counter();
00039b deac      	RCALL _seg_counter
                 ; 0000 0149             if (register_step == 0) {
00039c 91e0 026e 	LDS  R30,_register_step
00039e 91f0 026f 	LDS  R31,_register_step+1
0003a0 9730      	SBIW R30,0
0003a1 f411      	BRNE _0x6C
                 ; 0000 014A                 register_user();  // Entering username
0003a2 dd7d      	RCALL _register_user
                 ; 0000 014B             } else if (register_step == 1) {
0003a3 c007      	RJMP _0x6D
                 _0x6C:
0003a4 91a0 026e 	LDS  R26,_register_step
0003a6 91b0 026f 	LDS  R27,_register_step+1
0003a8 9711      	SBIW R26,1
0003a9 f409      	BRNE _0x6E
                 ; 0000 014C                 register_password();  // Entering password
0003aa dda2      	RCALL _register_password
                 ; 0000 014D             }
                 ; 0000 014E             break;
                 _0x6E:
                 _0x6D:
0003ab c02e      	RJMP _0x65
                 ; 0000 014F         case 4:
                 _0x6B:
0003ac 30e4      	CPI  R30,LOW(0x4)
0003ad e0a0      	LDI  R26,HIGH(0x4)
0003ae 07fa      	CPC  R31,R26
0003af f451      	BRNE _0x6F
                 ; 0000 0150             // Logged in - normal menu operations
                 ; 0000 0151             bounce1();
0003b0 dead      	RCALL _bounce1
                 ; 0000 0152             bounce2();
0003b1 ded0      	RCALL _bounce2
                 ; 0000 0153             if (list == 0) {
0003b2 940e 055e 	CALL SUBOPT_0x12
0003b4 9730      	SBIW R30,0
0003b5 f411      	BRNE _0x70
                 ; 0000 0154                 handle_options();
0003b6 df41      	RCALL _handle_options
                 ; 0000 0155             } else {
0003b7 c001      	RJMP _0x71
                 _0x70:
                 ; 0000 0156                 handle_list();
0003b8 df6d      	RCALL _handle_list
                 ; 0000 0157             }
                 _0x71:
                 ; 0000 0158             break;
0003b9 c020      	RJMP _0x65
                 ; 0000 0159         case 5:
                 _0x6F:
0003ba 30e5      	CPI  R30,LOW(0x5)
0003bb e0a0      	LDI  R26,HIGH(0x5)
0003bc 07fa      	CPC  R31,R26
0003bd f439      	BRNE _0x72
                 ; 0000 015A             // Register Sucessful
                 ; 0000 015B             if (t2 > 49) menu = 1;
0003be 940e 057a 	CALL SUBOPT_0x17
0003c0 f41c      	BRGE _0x73
0003c1 e0e1      	LDI  R30,LOW(1)
0003c2 e0f0      	LDI  R31,HIGH(1)
0003c3 016f      	MOVW R12,R30
                 ; 0000 015C             break;
                 _0x73:
0003c4 c015      	RJMP _0x65
                 ; 0000 015D         case 6:
                 _0x72:
0003c5 30e6      	CPI  R30,LOW(0x6)
0003c6 e0a0      	LDI  R26,HIGH(0x6)
0003c7 07fa      	CPC  R31,R26
0003c8 f439      	BRNE _0x74
                 ; 0000 015E             // Login Sucessful
                 ; 0000 015F             if (t2 > 49) menu = 4;
0003c9 940e 057a 	CALL SUBOPT_0x17
0003cb f41c      	BRGE _0x75
0003cc e0e4      	LDI  R30,LOW(4)
0003cd e0f0      	LDI  R31,HIGH(4)
0003ce 016f      	MOVW R12,R30
                 ; 0000 0160             break;
                 _0x75:
0003cf c00a      	RJMP _0x65
                 ; 0000 0161         case 7:
                 _0x74:
0003d0 30e7      	CPI  R30,LOW(0x7)
0003d1 e0a0      	LDI  R26,HIGH(0x7)
0003d2 07fa      	CPC  R31,R26
0003d3 f431      	BRNE _0x65
                 ; 0000 0162             // wrong user_pass
                 ; 0000 0163             if (t2 > 49) menu = 1;
0003d4 940e 057a 	CALL SUBOPT_0x17
0003d6 f41c      	BRGE _0x77
0003d7 e0e1      	LDI  R30,LOW(1)
0003d8 e0f0      	LDI  R31,HIGH(1)
0003d9 016f      	MOVW R12,R30
                 ; 0000 0164             break;
                 _0x77:
                 ; 0000 0165     }
                 _0x65:
                 ; 0000 0166 }
0003da 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void) {
                 ; 0000 0169 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 016A     // I/O Port Configuration
                 ; 0000 016B     DDRA = 0xFF; PORTA = 0x00;
0003db efef      	LDI  R30,LOW(255)
0003dc bbea      	OUT  0x1A,R30
0003dd e0e0      	LDI  R30,LOW(0)
0003de bbeb      	OUT  0x1B,R30
                 ; 0000 016C     DDRB = 0x00; PORTB = 0x00;
0003df bbe7      	OUT  0x17,R30
0003e0 bbe8      	OUT  0x18,R30
                 ; 0000 016D     DDRC = 0x07; PORTC = 0x00;
0003e1 e0e7      	LDI  R30,LOW(7)
0003e2 bbe4      	OUT  0x14,R30
0003e3 e0e0      	LDI  R30,LOW(0)
0003e4 bbe5      	OUT  0x15,R30
                 ; 0000 016E     DDRD = 0x00; PORTD = 0x00;
0003e5 bbe1      	OUT  0x11,R30
0003e6 bbe2      	OUT  0x12,R30
                 ; 0000 016F     PIND=0xFF;
0003e7 efef      	LDI  R30,LOW(255)
0003e8 bbe0      	OUT  0x10,R30
                 ; 0000 0170 
                 ; 0000 0171     // Timer Initialization
                 ; 0000 0172     TCCR0 = (1 << WGM01) | (1 << CS02) | (1 << CS00);
0003e9 e0ed      	LDI  R30,LOW(13)
0003ea bfe3      	OUT  0x33,R30
                 ; 0000 0173     OCR0 = 0x9B;
0003eb e9eb      	LDI  R30,LOW(155)
0003ec bfec      	OUT  0x3C,R30
                 ; 0000 0174     TIMSK = (1 << OCIE0);
0003ed e0e2      	LDI  R30,LOW(2)
0003ee bfe9      	OUT  0x39,R30
                 ; 0000 0175 
                 ; 0000 0176     // External Interrupts
                 ; 0000 0177     GICR |= (1 << INT1) | (1 << INT0) | (1 << INT2);
0003ef b7eb      	IN   R30,0x3B
0003f0 6ee0      	ORI  R30,LOW(0xE0)
0003f1 bfeb      	OUT  0x3B,R30
                 ; 0000 0178     MCUCR = (1 << ISC11) | (1 << ISC01);
0003f2 e0ea      	LDI  R30,LOW(10)
0003f3 bfe5      	OUT  0x35,R30
                 ; 0000 0179     MCUCSR &= ~(1 << ISC2);
0003f4 b7e4      	IN   R30,0x34
0003f5 7bef      	ANDI R30,0xBF
0003f6 bfe4      	OUT  0x34,R30
                 ; 0000 017A 
                 ; 0000 017B     // LCD Initialization
                 ; 0000 017C     lcd_init(16);
0003f7 e1a0      	LDI  R26,LOW(16)
0003f8 d085      	RCALL _lcd_init
                 ; 0000 017D 
                 ; 0000 017E     // Enable Global Interrupts
                 ; 0000 017F     #asm("sei")
0003f9 9478      	sei
                 ; 0000 0180 
                 ; 0000 0181     while (1) {
                 _0x78:
                 ; 0000 0182         handle_menu();
0003fa df7f      	RCALL _handle_menu
                 ; 0000 0183     }
0003fb cffe      	RJMP _0x78
                 ; 0000 0184 }
                 _0x7B:
0003fc cfff      	RJMP _0x7B
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0003fd 93aa      	ST   -Y,R26
0003fe b3e8      	IN   R30,0x18
0003ff 70ef      	ANDI R30,LOW(0xF)
000400 2fae      	MOV  R26,R30
000401 81e8      	LD   R30,Y
000402 7fe0      	ANDI R30,LOW(0xF0)
000403 2bea      	OR   R30,R26
000404 bbe8      	OUT  0x18,R30
                +
000405 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000406 958a     +DEC R24
000407 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000408 9ac3      	SBI  0x18,3
                +
000409 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00040a 958a     +DEC R24
00040b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00040c 98c3      	CBI  0x18,3
                +
00040d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00040e 958a     +DEC R24
00040f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000410 c09a      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000411 93aa      	ST   -Y,R26
000412 81a8      	LD   R26,Y
000413 dfe9      	RCALL __lcd_write_nibble_G100
000414 81e8          ld    r30,y
000415 95e2          swap  r30
000416 83e8          st    y,r30
000417 81a8      	LD   R26,Y
000418 dfe4      	RCALL __lcd_write_nibble_G100
                +
000419 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00041a 958a     +DEC R24
00041b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00041c c08e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00041d 93aa      	ST   -Y,R26
00041e 81e8      	LD   R30,Y
00041f e0f0      	LDI  R31,0
000420 52e3      	SUBI R30,LOW(-__base_y_G100)
000421 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000422 81e0      	LD   R30,Z
000423 81a9      	LDD  R26,Y+1
000424 0fae      	ADD  R26,R30
000425 dfeb      	RCALL __lcd_write_data
000426 81e9      	LDD  R30,Y+1
000427 93e0 02e1 	STS  __lcd_x,R30
000429 81e8      	LD   R30,Y
00042a 93e0 02e2 	STS  __lcd_y,R30
00042c 9622      	ADIW R28,2
00042d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00042e e0a2      	LDI  R26,LOW(2)
00042f 940e 057f 	CALL SUBOPT_0x18
000431 e0ac      	LDI  R26,LOW(12)
000432 dfde      	RCALL __lcd_write_data
000433 e0a1      	LDI  R26,LOW(1)
000434 940e 057f 	CALL SUBOPT_0x18
000436 e0e0      	LDI  R30,LOW(0)
000437 93e0 02e2 	STS  __lcd_y,R30
000439 93e0 02e1 	STS  __lcd_x,R30
00043b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00043c 93aa      	ST   -Y,R26
00043d 81a8      	LD   R26,Y
00043e 30aa      	CPI  R26,LOW(0xA)
00043f f031      	BREQ _0x2000005
000440 91e0 02e3 	LDS  R30,__lcd_maxx
000442 91a0 02e1 	LDS  R26,__lcd_x
000444 17ae      	CP   R26,R30
000445 f060      	BRLO _0x2000004
                 _0x2000005:
000446 e0e0      	LDI  R30,LOW(0)
000447 93ea      	ST   -Y,R30
000448 91a0 02e2 	LDS  R26,__lcd_y
00044a 5faf      	SUBI R26,-LOW(1)
00044b 93a0 02e2 	STS  __lcd_y,R26
00044d dfcf      	RCALL _lcd_gotoxy
00044e 81a8      	LD   R26,Y
00044f 30aa      	CPI  R26,LOW(0xA)
000450 f409      	BRNE _0x2000007
000451 c059      	RJMP _0x2080001
                 _0x2000007:
                 _0x2000004:
000452 91e0 02e1 	LDS  R30,__lcd_x
000454 5fef      	SUBI R30,-LOW(1)
000455 93e0 02e1 	STS  __lcd_x,R30
000457 9ac0      	SBI  0x18,0
000458 81a8      	LD   R26,Y
000459 dfb7      	RCALL __lcd_write_data
00045a 98c0      	CBI  0x18,0
00045b c04f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00045c 93ba      	ST   -Y,R27
00045d 93aa      	ST   -Y,R26
00045e 931a      	ST   -Y,R17
                 _0x2000008:
00045f 81a9      	LDD  R26,Y+1
000460 81ba      	LDD  R27,Y+1+1
000461 91ed      	LD   R30,X+
000462 83a9      	STD  Y+1,R26
000463 83ba      	STD  Y+1+1,R27
000464 2f1e      	MOV  R17,R30
000465 30e0      	CPI  R30,0
000466 f019      	BREQ _0x200000A
000467 2fa1      	MOV  R26,R17
000468 dfd3      	RCALL _lcd_putchar
000469 cff5      	RJMP _0x2000008
                 _0x200000A:
00046a c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00046b 93ba      	ST   -Y,R27
00046c 93aa      	ST   -Y,R26
00046d 931a      	ST   -Y,R17
                 _0x200000B:
00046e 81e9      	LDD  R30,Y+1
00046f 81fa      	LDD  R31,Y+1+1
000470 9631      	ADIW R30,1
000471 83e9      	STD  Y+1,R30
000472 83fa      	STD  Y+1+1,R31
000473 9731      	SBIW R30,1
000474 91e4      	LPM  R30,Z
000475 2f1e      	MOV  R17,R30
000476 30e0      	CPI  R30,0
000477 f019      	BREQ _0x200000D
000478 2fa1      	MOV  R26,R17
000479 dfc2      	RCALL _lcd_putchar
00047a cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x2080002:
00047b 8118      	LDD  R17,Y+0
00047c 9623      	ADIW R28,3
00047d 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00047e 93aa      	ST   -Y,R26
00047f b3e7      	IN   R30,0x17
000480 6fe0      	ORI  R30,LOW(0xF0)
000481 bbe7      	OUT  0x17,R30
000482 9abb      	SBI  0x17,3
000483 9ab8      	SBI  0x17,0
000484 9ab9      	SBI  0x17,1
000485 98c3      	CBI  0x18,3
000486 98c0      	CBI  0x18,0
000487 98c1      	CBI  0x18,1
000488 81e8      	LD   R30,Y
000489 93e0 02e3 	STS  __lcd_maxx,R30
00048b 58e0      	SUBI R30,-LOW(128)
                +
00048c 93e0 02df+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00048e 81e8      	LD   R30,Y
00048f 54e0      	SUBI R30,-LOW(192)
                +
000490 93e0 02e0+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000492 e1a4      	LDI  R26,LOW(20)
000493 e0b0      	LDI  R27,0
000494 940e 058d 	CALL _delay_ms
000496 940e 0585 	CALL SUBOPT_0x19
000498 940e 0585 	CALL SUBOPT_0x19
00049a 940e 0585 	CALL SUBOPT_0x19
00049c e2a0      	LDI  R26,LOW(32)
00049d df5f      	RCALL __lcd_write_nibble_G100
                +
00049e ec88     +LDI R24 , LOW ( 200 )
00049f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004a0 9701     +SBIW R24 , 1
0004a1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004a2 e2a8      	LDI  R26,LOW(40)
0004a3 df6d      	RCALL __lcd_write_data
0004a4 e0a4      	LDI  R26,LOW(4)
0004a5 df6b      	RCALL __lcd_write_data
0004a6 e8a5      	LDI  R26,LOW(133)
0004a7 df69      	RCALL __lcd_write_data
0004a8 e0a6      	LDI  R26,LOW(6)
0004a9 df67      	RCALL __lcd_write_data
0004aa df83      	RCALL _lcd_clear
                 _0x2080001:
0004ab 9621      	ADIW R28,1
0004ac 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0004ad 93ba      	ST   -Y,R27
0004ae 93aa      	ST   -Y,R26
0004af 81b9          ldd  r27,y+1
0004b0 81a8          ld   r26,y
0004b1 9610          adiw r26,0
0004b2 f031          breq memset1
0004b3 81fc          ldd  r31,y+4
0004b4 81eb          ldd  r30,y+3
0004b5 816a          ldd  r22,y+2
                 memset0:
0004b6 9361          st   z+,r22
0004b7 9711          sbiw r26,1
0004b8 f7e9          brne memset0
                 memset1:
0004b9 81eb          ldd  r30,y+3
0004ba 81fc          ldd  r31,y+4
0004bb 9625      	ADIW R28,5
0004bc 9508      	RET
                 ; .FEND
                 _strcmp:
                 ; .FSTART _strcmp
0004bd 93ba      	ST   -Y,R27
0004be 93aa      	ST   -Y,R26
0004bf 91e9          ld   r30,y+
0004c0 91f9          ld   r31,y+
0004c1 91a9          ld   r26,y+
0004c2 91b9          ld   r27,y+
                 strcmp0:
0004c3 916d          ld   r22,x+
0004c4 9171          ld   r23,z+
0004c5 1767          cp   r22,r23
0004c6 f421          brne strcmp1
0004c7 2366          tst  r22
0004c8 f7d1          brne strcmp0
                 strcmp3:
0004c9 27ee          clr  r30
0004ca 9508          ret
                 strcmp1:
0004cb 1b67          sub  r22,r23
0004cc f3e1          breq strcmp3
0004cd e0e1          ldi  r30,1
0004ce f408          brcc strcmp2
0004cf 50e2          subi r30,2
                 strcmp2:
0004d0 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
0004d1 93ba      	ST   -Y,R27
0004d2 93aa      	ST   -Y,R26
0004d3 91e9          ld   r30,y+
0004d4 91f9          ld   r31,y+
0004d5 91a9          ld   r26,y+
0004d6 91b9          ld   r27,y+
0004d7 01cd          movw r24,r26
                 strcpy0:
0004d8 9161          ld   r22,z+
0004d9 936d          st   x+,r22
0004da 2366          tst  r22
0004db f7e1          brne strcpy0
0004dc 01fc          movw r30,r24
0004dd 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _option:
000260           	.BYTE 0x2
                 _clc:
000262           	.BYTE 0x2
                 _D1:
000264           	.BYTE 0x2
                 _D2:
000266           	.BYTE 0x2
                 _list:
000268           	.BYTE 0x2
                 _i:
00026a           	.BYTE 0x2
                 _login_step:
00026c           	.BYTE 0x2
                 _register_step:
00026e           	.BYTE 0x2
                 _keypad:
000270           	.BYTE 0x10
                 _key:
000280           	.BYTE 0x1
                 _temp_username:
000281           	.BYTE 0xA
                 _temp_password:
00028b           	.BYTE 0x5
                 _users:
000290           	.BYTE 0x4B
                 _user_count:
0002db           	.BYTE 0x2
                 __base_y_G100:
0002dd           	.BYTE 0x4
                 __lcd_x:
0002e1           	.BYTE 0x1
                 __lcd_y:
0002e2           	.BYTE 0x1
                 __lcd_maxx:
0002e3           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x0:
0004de e0e0      	LDI  R30,LOW(0)
0004df 93e0 0262 	STS  _clc,R30
0004e1 93e0 0263 	STS  _clc+1,R30
0004e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
0004e4 e0e0      	LDI  R30,LOW(0)
0004e5 93ea      	ST   -Y,R30
0004e6 e0a0      	LDI  R26,LOW(0)
0004e7 940e 041d 	CALL _lcd_gotoxy
0004e9 2c04      	MOV  R0,R4
0004ea 2805      	OR   R0,R5
0004eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
0004ec 91e0 0262 	LDS  R30,_clc
0004ee 91f0 0263 	LDS  R31,_clc+1
0004f0 9730      	SBIW R30,0
0004f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x3:
0004f2 940e 042e 	CALL _lcd_clear
0004f4 e0e1      	LDI  R30,LOW(1)
0004f5 e0f0      	LDI  R31,HIGH(1)
0004f6 93e0 0262 	STS  _clc,R30
0004f8 93f0 0263 	STS  _clc+1,R31
0004fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0004fb e0e9      	LDI  R30,LOW(9)
0004fc e0f0      	LDI  R31,HIGH(9)
0004fd 15e4      	CP   R30,R4
0004fe 05f5      	CPC  R31,R5
0004ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x5:
000500 91e0 0280 	LDS  R30,_key
000502 e0f0      	LDI  R31,0
000503 59e0      	SUBI R30,LOW(-_keypad)
000504 4ffd      	SBCI R31,HIGH(-_keypad)
000505 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x6:
000506 01f2      	MOVW R30,R4
000507 9731      	SBIW R30,1
000508 57ef      	SUBI R30,LOW(-_temp_username)
000509 4ffd      	SBCI R31,HIGH(-_temp_username)
00050a 01df      	MOVW R26,R30
00050b cff4      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00050c e8a1      	LDI  R26,LOW(_temp_username)
00050d e0b2      	LDI  R27,HIGH(_temp_username)
00050e 940e 045c 	CALL _lcd_puts
000510 cfea      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000511 81e0      	LD   R30,Z
000512 93ec      	ST   X,R30
000513 2444      	CLR  R4
000514 2455      	CLR  R5
000515 cfc8      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000516 e0e4      	LDI  R30,LOW(4)
000517 e0f0      	LDI  R31,HIGH(4)
000518 15e4      	CP   R30,R4
000519 05f5      	CPC  R31,R5
00051a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xA:
00051b 01f2      	MOVW R30,R4
00051c 9731      	SBIW R30,1
00051d 57e5      	SUBI R30,LOW(-_temp_password)
00051e 4ffd      	SBCI R31,HIGH(-_temp_password)
00051f 01df      	MOVW R26,R30
000520 cfdf      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000521 e8ab      	LDI  R26,LOW(_temp_password)
000522 e0b2      	LDI  R27,HIGH(_temp_password)
000523 940e 045c 	CALL _lcd_puts
000525 cff0      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
000526 91a0 02db 	LDS  R26,_user_count
000528 91b0 02dc 	LDS  R27,_user_count+1
00052a e0ef      	LDI  R30,LOW(15)
00052b 940e 05a0 	CALL __MULB1W2U
00052d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00052e 57e0      	SUBI R30,LOW(-_users)
00052f 4ffd      	SBCI R31,HIGH(-_users)
000530 93fa      	ST   -Y,R31
000531 93ea      	ST   -Y,R30
000532 e8a1      	LDI  R26,LOW(_temp_username)
000533 e0b2      	LDI  R27,HIGH(_temp_username)
000534 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
000535 56e6     +SUBI R30 , LOW ( - _users - ( 10 ) )
000536 4ffd     +SBCI R31 , HIGH ( - _users - ( 10 ) )
                 	__ADDW1MN _users,10
000537 93fa      	ST   -Y,R31
000538 93ea      	ST   -Y,R30
000539 e8ab      	LDI  R26,LOW(_temp_password)
00053a e0b2      	LDI  R27,HIGH(_temp_password)
00053b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
00053c 91ed      	LD   R30,X+
00053d 91fd      	LD   R31,X+
00053e 9631      	ADIW R30,1
00053f 93fe      	ST   -X,R31
000540 93ee      	ST   -X,R30
000541 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x10:
000542 940e 046b 	CALL _lcd_putsf
000544 e8e1      	LDI  R30,LOW(_temp_username)
000545 e0f2      	LDI  R31,HIGH(_temp_username)
000546 93fa      	ST   -Y,R31
000547 93ea      	ST   -Y,R30
000548 e0e0      	LDI  R30,LOW(0)
000549 93ea      	ST   -Y,R30
00054a e0aa      	LDI  R26,LOW(10)
00054b e0b0      	LDI  R27,0
00054c 940e 04ad 	CALL _memset
00054e e8eb      	LDI  R30,LOW(_temp_password)
00054f e0f2      	LDI  R31,HIGH(_temp_password)
000550 93fa      	ST   -Y,R31
000551 93ea      	ST   -Y,R30
000552 e0e0      	LDI  R30,LOW(0)
000553 93ea      	ST   -Y,R30
000554 e0a5      	LDI  R26,LOW(5)
000555 e0b0      	LDI  R27,0
000556 940e 04ad 	CALL _memset
000558 cf85      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000559 91a0 026a 	LDS  R26,_i
00055b 91b0 026b 	LDS  R27,_i+1
00055d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
00055e 91e0 0268 	LDS  R30,_list
000560 91f0 0269 	LDS  R31,_list+1
000562 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000563 91e0 0260 	LDS  R30,_option
000565 91f0 0261 	LDS  R31,_option+1
000567 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
000568 e0e0      	LDI  R30,LOW(0)
000569 93e0 0268 	STS  _list,R30
00056b 93e0 0269 	STS  _list+1,R30
00056d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
00056e e0e0      	LDI  R30,LOW(0)
00056f 93ea      	ST   -Y,R30
000570 e0a0      	LDI  R26,LOW(0)
000571 940c 041d 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
000573 e0e1      	LDI  R30,LOW(1)
000574 e0f0      	LDI  R31,HIGH(1)
000575 93e0 0260 	STS  _option,R30
000577 93f0 0261 	STS  _option+1,R31
000579 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00057a e3e1      	LDI  R30,LOW(49)
00057b e0f0      	LDI  R31,HIGH(49)
00057c 15ea      	CP   R30,R10
00057d 05fb      	CPC  R31,R11
00057e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
00057f 940e 0411 	CALL __lcd_write_data
000581 e0a3      	LDI  R26,LOW(3)
000582 e0b0      	LDI  R27,0
000583 940c 058d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x19:
000585 e3a0      	LDI  R26,LOW(48)
000586 940e 03fd 	CALL __lcd_write_nibble_G100
                +
000588 ec88     +LDI R24 , LOW ( 200 )
000589 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00058a 9701     +SBIW R24 , 1
00058b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00058c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00058d 9610      	adiw r26,0
00058e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00058f ed80     +LDI R24 , LOW ( 0x7D0 )
000590 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000591 9701     +SBIW R24 , 1
000592 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000593 95a8      	wdr
000594 9711      	sbiw r26,1
000595 f7c9      	brne __delay_ms0
                 __delay_ms1:
000596 9508      	ret
                 
                 __ASRW4:
000597 95f5      	ASR  R31
000598 95e7      	ROR  R30
                 __ASRW3:
000599 95f5      	ASR  R31
00059a 95e7      	ROR  R30
                 __ASRW2:
00059b 95f5      	ASR  R31
00059c 95e7      	ROR  R30
00059d 95f5      	ASR  R31
00059e 95e7      	ROR  R30
00059f 9508      	RET
                 
                 __MULB1W2U:
0005a0 2f6e      	MOV  R22,R30
0005a1 9f6a      	MUL  R22,R26
0005a2 01f0      	MOVW R30,R0
0005a3 9f6b      	MUL  R22,R27
0005a4 0df0      	ADD  R31,R0
0005a5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  18 r1 :   1 r2 :   0 r3 :   0 r4 :  11 r5 :   7 r6 :  10 r7 :   6 
r8 :   6 r9 :   4 r10:  10 r11:   8 r12:   9 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:  14 r23:   3 
r24:  23 r25:   5 r26: 150 r27:  51 r28:   5 r29:   1 r30: 307 r31: 106 
x  :  17 y  :  86 z  :  31 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   2 
adiw  :  13 and   :   0 andi  :   4 asr   :   4 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  13 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   4 brmi  :   0 brne  :  66 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 119 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  33 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  11 cpc   :  26 cpi   :  31 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   0 jmp   :  24 ld    :  46 ldd   :  13 ldi   : 203 
lds   :  37 lpm   :  17 lsl   :   0 lsr   :   0 mov   :   8 movw  :  29 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   3 
ori   :   2 out   :  31 pop   :   0 push  :   0 rcall :  36 ret   :  41 
reti  :   2 rjmp  :  53 rol   :   0 ror   :   4 sbc   :   0 sbci  :   7 
sbi   :   8 sbic  :   3 sbis  :   0 sbiw  :  24 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  59 std   :   4 sts   :  44 sub   :   1 subi  :  12 swap  :   1 
tst   :   2 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b4c   2584    308   2892   32768   8.8%
[.dseg] 0x000060 0x0002e4      0    132    132    2048   6.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
